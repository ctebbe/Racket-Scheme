(define fact
     "let makemult = proc (maker) proc (x) proc(y)
        if zero?(x) 
          then 0
        else -((((maker maker) -(x, 1)) y), -(0, y))
        
      in let times = proc(x) proc(y)
        (((makemult makemult) x) y)
        
      in let funct = proc(z) proc(num)
        if zero?(num)
          then 1
        else ((times ((z z) -(num, 1))) num)

      in let fact = proc (x) ((funct funct) x)      
      in (fact 6)")
